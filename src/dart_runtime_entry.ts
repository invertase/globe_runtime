// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: dart_runtime_entry.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "ext:bufbuild/wire/index.js";

export const protobufPackage = "globe.runtime";

/**
 * A generic JSON-like payload transmitted as MessagePack-encoded bytes.
 * The actual data structure is unpacked by the runtime using MessagePack.
 */
export interface JsonPayload {
  /** MessagePack-encoded content */
  data: Uint8Array;
}

export interface DartMessage {
  done: boolean;
  data?: Uint8Array | undefined;
  error?: string | undefined;
}

/** Message structure for sending data to Dart */
export interface SendValueRequest {
  callbackId: number;
  message: DartMessage | undefined;
}

/** Response message (boolean success indicator) */
export interface RpcResponse {
  success: boolean;
}

function createBaseJsonPayload(): JsonPayload {
  return { data: new Uint8Array(0) };
}

export const JsonPayload: MessageFns<JsonPayload> = {
  encode(
    message: JsonPayload,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JsonPayload {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJsonPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JsonPayload {
    return {
      data: isSet(object.data)
        ? bytesFromBase64(object.data)
        : new Uint8Array(0),
    };
  },

  toJSON(message: JsonPayload): unknown {
    const obj: any = {};
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JsonPayload>, I>>(base?: I): JsonPayload {
    return JsonPayload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JsonPayload>, I>>(
    object: I
  ): JsonPayload {
    const message = createBaseJsonPayload();
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseDartMessage(): DartMessage {
  return { done: false, data: undefined, error: undefined };
}

export const DartMessage: MessageFns<DartMessage> = {
  encode(
    message: DartMessage,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.done !== false) {
      writer.uint32(8).bool(message.done);
    }
    if (message.data !== undefined) {
      writer.uint32(18).bytes(message.data);
    }
    if (message.error !== undefined) {
      writer.uint32(26).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DartMessage {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDartMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.done = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DartMessage {
    return {
      done: isSet(object.done) ? globalThis.Boolean(object.done) : false,
      data: isSet(object.data) ? bytesFromBase64(object.data) : undefined,
      error: isSet(object.error) ? globalThis.String(object.error) : undefined,
    };
  },

  toJSON(message: DartMessage): unknown {
    const obj: any = {};
    if (message.done !== false) {
      obj.done = message.done;
    }
    if (message.data !== undefined) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.error !== undefined) {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DartMessage>, I>>(base?: I): DartMessage {
    return DartMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DartMessage>, I>>(
    object: I
  ): DartMessage {
    const message = createBaseDartMessage();
    message.done = object.done ?? false;
    message.data = object.data ?? undefined;
    message.error = object.error ?? undefined;
    return message;
  },
};

function createBaseSendValueRequest(): SendValueRequest {
  return { callbackId: 0, message: undefined };
}

export const SendValueRequest: MessageFns<SendValueRequest> = {
  encode(
    message: SendValueRequest,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.callbackId !== 0) {
      writer.uint32(8).int32(message.callbackId);
    }
    if (message.message !== undefined) {
      DartMessage.encode(message.message, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendValueRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendValueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.callbackId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = DartMessage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendValueRequest {
    return {
      callbackId: isSet(object.callbackId)
        ? globalThis.Number(object.callbackId)
        : 0,
      message: isSet(object.message)
        ? DartMessage.fromJSON(object.message)
        : undefined,
    };
  },

  toJSON(message: SendValueRequest): unknown {
    const obj: any = {};
    if (message.callbackId !== 0) {
      obj.callbackId = Math.round(message.callbackId);
    }
    if (message.message !== undefined) {
      obj.message = DartMessage.toJSON(message.message);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendValueRequest>, I>>(
    base?: I
  ): SendValueRequest {
    return SendValueRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendValueRequest>, I>>(
    object: I
  ): SendValueRequest {
    const message = createBaseSendValueRequest();
    message.callbackId = object.callbackId ?? 0;
    message.message =
      object.message !== undefined && object.message !== null
        ? DartMessage.fromPartial(object.message)
        : undefined;
    return message;
  },
};

function createBaseRpcResponse(): RpcResponse {
  return { success: false };
}

export const RpcResponse: MessageFns<RpcResponse> = {
  encode(
    message: RpcResponse,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RpcResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRpcResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RpcResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
    };
  },

  toJSON(message: RpcResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RpcResponse>, I>>(base?: I): RpcResponse {
    return RpcResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RpcResponse>, I>>(
    object: I
  ): RpcResponse {
    const message = createBaseRpcResponse();
    message.success = object.success ?? false;
    return message;
  },
};

/** Service definition for RPC */
export interface DartJSService {
  /** Send a single message to Dart */
  SendValue(request: SendValueRequest): Promise<RpcResponse>;
}

export const DartJSServiceServiceName = "globe.runtime.DartJSService";
export class DartJSServiceClientImpl implements DartJSService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || DartJSServiceServiceName;
    this.rpc = rpc;
    this.SendValue = this.SendValue.bind(this);
  }
  SendValue(request: SendValueRequest): Promise<RpcResponse> {
    const data = SendValueRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SendValue", data);
    return promise.then((data) => RpcResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array
  ): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
