use std::env;
use std::path::PathBuf;

fn main() {
    let project_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
    let include_path = PathBuf::from(format!("{}/third_party/dart/include", project_dir));
    let dart_binding_file = PathBuf::from(format!("{}/src/dart_api_dl.rs", project_dir));

    // Compile the C code
    cc::Build::new()
        .file("third_party/dart/include/dart_api_dl.c")
        .include(include_path)
        .flag("-std=c11")
        .flag("-fPIC")
        .compile("dart_api_dl");

    // Add linker argument to allow undefined symbols
    println!("cargo:rustc-link-arg=-Wl,-undefined,dynamic_lookup");

    println!("cargo:rerun-if-changed=third_party/dart/internal/dart_api_dl.c");
    println!("cargo:rerun-if-changed=third_party/dart/include/dart_api.h");

    // Generate Rust bindings for the Dart API
    let bindings = bindgen::Builder::default()
        .prepend_enum_name(false)
        .header("third_party/dart/include/dart_api_dl.h")
        // .allowlist_function("^Dart_.*") // Only allow functions starting with "Dart"
        // .allowlist_type("^Dart_.*") // Only allow types starting with "Dart"
        .clang_arg("-Ithird_party/dart/include")
        .raw_line("// Automatically generated by bindgen. Do not edit.")
        .raw_line("#![allow(non_snake_case)]")
        .raw_line("#![allow(non_camel_case_types)]")
        .raw_line("#![allow(non_upper_case_globals)]")
        .raw_line("#![allow(unused)]")
        // .raw_line("#![allow(clippy::all)]")
        .generate()
        .expect("Unable to generate bindings");

    // Write the bindings to the custom directory
    bindings
        .write_to_file(dart_binding_file)
        .expect("Couldn't write bindings!");
}
